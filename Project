#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May  3 13:53:17 2019

@author: snyq
"""
import numpy as np
import matplotlib.pyplot as plt

k=120
mu0=1 #rest friction
muv=0.5 #moving frictionduring 20 min
g=1 #gravity
m=1 #mass of boxes
deltat=0.1 #timestep

def mu(x,v): #returns list
   delx1=x[1]-x[0]
   delx2=x[2]-x[1]
   mu_net=np.array([0,0,0])
   
   if abs((delx1)*k/(m*g))<=mu0:
      mu_net[0]=(delx1)*k/(m*g)
   else:
      mu_net[0]=muv
   
   if abs((delx2-delx1)*k/(m*g))<=mu0:
      mu_net[1]=(delx2-delx1)*k/(m*g)
   else:
      mu_net[1]=muv
      
   return mu_net

def acc(x,v): #returns 2 accelerations - one for each box (in a list). x, v vectors
   mu_n=mu(x,v)
   delx1=x[1]-x[0]
   delx2=x[2]-x[1]
   a=np.array([0,0,0])
   
   a[0]=k*(delx1)/m-mu_n[0]*g
   a[1]=k*(delx2-delx1)/m-mu_n[1]*g
   a[2]=0
      
   return a

def eulerx(x,v,h=deltat): #Runga kutta?
   x=x+v*h
   return x

def eulerv(v,a,h=deltat): #Runga kutta?
   v=v+a*h
   return v

x=np.array([0,1,2]) #initial positions
v=np.array([0,0,1]) #initial velocity
time=20
xlist=[x[1]]
for i in range(int(time/deltat)):
   a=acc(x,v)
   v=eulerv(v,a)
   x=eulerx(x,v)
   xlist.append(x[1])

timelist=np.linspace(0, time, int(time/deltat)+1)
print(len(timelist))
print(len(xlist))
plt.plot(timelist,xlist)

   
   
   
